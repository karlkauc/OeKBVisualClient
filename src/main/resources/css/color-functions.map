{
	"version": 3,
	"file": "../sass/color-functions.css",
	"sources": [
		"../sass/color-functions.scss"
	],
	"sourcesContent": [
		"//////////////////////////////\n// Color Palette\n//\n// Gets the specified color from the specified color palette\n//\n// Usage:\n//\n// background: color('blue', 80); // #1d3649\n// background: color('blue');     // #4178be\n//\n// background: color('blue', 80, $alpha: 0.5); // rgba(29, 54, 73, 0.5)\n// background: color('blue', $alpha: 0.5); // rgba(65, 120, 190, 0.5)\n//\n//////////////////////////////\n@function color($palette, $grade: 0, $alpha: 1) {\n  // Because it's spelled gr(a|e)y and we've got spaces\n  @if $palette == 'grey' {\n    $palette: 'gray';\n  }\n  @else if $palette == 'warm-grey' or $palette == 'warm grey' or $palette == 'warm gray' {\n    $palette: 'warm-gray';\n  }\n  @else if $palette == 'cool-grey' or $palette == 'cool grey' or $palette == 'cool gray' {\n    $palette: 'cool-gray';\n  }\n  @else if $palette == 'neutral white' {\n    $palette: 'neutral-white';\n  }\n  @else if $palette == 'cool white' {\n    $palette: 'cool-white';\n  }\n  @else if $palette == 'warm white' {\n    $palette: 'warm-white';\n  }\n\n  $plt: map-get($__ibm-color-palettes, $palette);\n\n  @if $plt {\n    $grd: map-get($plt, $grade);\n    @return rgba($grd, $alpha);\n  }\n\n  $error-message: 'Color palette \"#{$palette}\" not found';\n  @if not $found-index {\n    @if feature-exists(at-error) {\n      @error $error-message;\n    }\n    @else {\n      @warn $error-message;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Tint and Shade Functions\n//////////////////////////////\n$singles: 'neutral-white', 'cool-white', 'warm-white';\n// Internal helper: finds the palette and key of a color\n@function _ibm-find-color($color) {\n  $found-index: false;\n  $found-palette: false;\n  @each $palette, $vals in $__ibm-color-palettes {\n    @if not $found-index {\n      @each $key, $clr in $vals {\n      \t@if $color == $clr and $key != 'core' {\n      \t  $found-index: $key;\n      \t  $found-palette: $palette;\n      \t}\n      }\n    }\n  }\n\n  $error-message: 'Color #{$color} is not an IBM color';\n\n  @if not $found-index {\n    @if feature-exists(at-error) {\n      @error $error-message;\n    }\n    @else {\n      @warn $error-message;\n    }\n  }\n  @return ('index': $found-index, 'palette': $found-palette);\n}\n\n// Internal helper: transforms amount into base 10, rounding\n@function _ibm-round-tint-shade($amount) {\n  @if $amount < 1 {\n    $amount: $amount * 10;\n  }\n\n  $return: round($amount);\n  $remainder: $return % 10;\n  $return: $return - $remainder;\n  @if $remainder >= 5 {\n    $return: $return + 10;\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// Tint an IBM Color\n//\n// Pass in a color (as retrieved from the `color` function) and how many stops you want to tint (lighten) the color along its palette.\n// Pegged to the lightest color in the palette\n//////////////////////////////\n@function color-tint($color, $amount) {\n  $key: _ibm-find-color($color);\n  $index: map-get($key, 'index');\n  $palette: map-get($key, 'palette');\n  $move: _ibm-round-tint-shade($amount);\n\n  @if index($singles, $palette) {\n    $index: $index - ($move / 10);\n    @if $index < 1 {\n      $index: 1;\n    }\n  }\n  @else if $palette == 'black' {\n    $index: 100;\n  }\n  @else if $palette == 'white' {\n    $index: 0;\n  }\n  @else {\n    $index: $index - $move;\n    @if $index < 10 {\n      $index: 1;\n    }\n  }\n\n  @return color($palette, $index);\n}\n\n//////////////////////////////\n// Shade an IBM Color\n//\n// Pass in a color (as retrieved from the `color` function) and how many stops you want to shade (darken) the color along its palette.\n// Pegged to the darkest color in the palette\n//////////////////////////////\n@function color-shade($color, $amount) {\n  $key: _ibm-find-color($color);\n  $index: map-get($key, 'index');\n  $palette: map-get($key, 'palette');\n  $move: _ibm-round-tint-shade($amount);\n\n  @if index($singles, $palette) {\n    $index: $index - ($move / 10);\n    @if $index > 4 {\n      $index: 4;\n    }\n  }\n  @else if $palette == 'black' {\n    $index: 100;\n  }\n  @else if $palette == 'white' {\n    $index: 0;\n  }\n  @else {\n    $index: $index + $move;\n    @if ($index > 90) {\n      $index: 90;\n    }\n  }\n\n  @return color($palette, $index);\n}\n\n//////////////////////////////\n// Get Colors\n//\n// Lists out available colors\n//////////////////////////////\n@function get-colors($palette: null) {\n  // Return a list of colors available if nothing is passed in\n  @if $palette == null {\n    @return map-keys($__ibm-color-palettes);\n  }\n  // Return the full color map if 'all' is passed in\n  @else if $palette == 'all' {\n    @return $__ibm-color-palettes;\n  }\n  // Return just the color map if a specific color is passed in\n  @else {\n    @return map-get($__ibm-color-palettes, $palette);\n  }\n}\n"
	],
	"mappings": "",
	"names": []
}